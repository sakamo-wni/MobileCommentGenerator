name: Streamlit UI Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'app.py'
      - 'src/ui/**'
      - 'tests/test_streamlit*.py'
      - '.github/workflows/ui-tests.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'app.py'
      - 'src/ui/**'
      - 'tests/test_streamlit*.py'
      - '.github/workflows/ui-tests.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock
        pip install streamlit>=1.28.0  # AppTestが含まれるバージョン
    
    - name: Set up test environment
      run: |
        # テスト用の環境変数設定
        echo "STREAMLIT_SERVER_HEADLESS=true" >> $GITHUB_ENV
        echo "STREAMLIT_BROWSER_GATHER_USAGE_STATS=false" >> $GITHUB_ENV
        
        # テスト用ディレクトリ作成
        mkdir -p data/history
        mkdir -p .streamlit
        
        # テスト用の設定ファイル作成
        echo "[server]" > .streamlit/config.toml
        echo "headless = true" >> .streamlit/config.toml
        echo "port = 8501" >> .streamlit/config.toml
    
    - name: Run UI unit tests
      run: |
        pytest tests/test_streamlit_utils.py -v --cov=src/ui/streamlit_utils --cov-report=xml --cov-report=term || true
        pytest tests/test_streamlit_components.py -v --cov=src/ui/streamlit_components --cov-append --cov-report=xml --cov-report=term || true
    
    - name: Run UI integration tests
      run: |
        pytest tests/test_streamlit_app.py -v --cov=app --cov-append --cov-report=xml --cov-report=term || true
      env:
        # モックAPI用の環境変数
        WXTECH_API_KEY: mock-wxtech-key
        AWS_ACCESS_KEY_ID: mock-aws-key
        AWS_SECRET_ACCESS_KEY: mock-aws-secret
        S3_COMMENT_BUCKET: mock-bucket
        OPENAI_API_KEY: mock-openai-key
        GEMINI_API_KEY: mock-gemini-key
        ANTHROPIC_API_KEY: mock-anthropic-key
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.10'
      with:
        file: ./coverage.xml
        flags: ui-tests
        name: UI Coverage
        fail_ci_if_error: false
    
    - name: Check test coverage
      run: |
        coverage report --fail-under=30 || true
      if: matrix.python-version == '3.10'
    
    - name: Generate coverage badge
      uses: 5monkeys/cobertura-action@master
      if: matrix.python-version == '3.10' && github.event_name == 'push'
      with:
        path: coverage.xml
        minimum_coverage: 30
        fail_below_threshold: false
    
    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          .coverage
          coverage.xml
          htmlcov/
        retention-days: 30

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install ruff black isort mypy
    
    - name: Run ruff
      run: |
        ruff check app.py src/ui/ tests/test_streamlit*.py || true
    
    - name: Check code formatting with black
      run: |
        black --check app.py src/ui/ tests/test_streamlit*.py || true
    
    - name: Check import sorting with isort
      run: |
        isort --check-only app.py src/ui/ tests/test_streamlit*.py || true
    
    - name: Run type checking with mypy
      run: |
        mypy app.py src/ui/ --ignore-missing-imports || true

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan with bandit
      uses: gaurav-nelson/bandit-action@v1
      with:
        path: "app.py src/ui/"
      continue-on-error: true
    
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
      continue-on-error: true
