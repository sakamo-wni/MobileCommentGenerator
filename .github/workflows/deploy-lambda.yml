name: Deploy to AWS Lambda

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'src/**'
      - 'infrastructure/aws/**'
      - '.github/workflows/deploy-lambda.yml'
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'src/**'
      - 'infrastructure/aws/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AWS_REGION: ap-northeast-1
  PYTHON_VERSION: '3.11'

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install uv
          uv pip install -e ".[dev]"
      
      - name: Run tests
        run: |
          pytest tests/test_parallel_comment_generator.py -v
          pytest tests/test_forecast_memory_cache.py -v
          pytest tests/test_spatial_forecast_cache.py -v
          pytest tests/test_memory_monitor.py -v
      
      - name: Run linting
        run: |
          ruff check src/
          mypy src/ --ignore-missing-imports

  deploy:
    runs-on: ubuntu-latest
    needs: [test]
    if: |
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') ||
      github.event_name == 'workflow_dispatch'
    
    permissions:
      id-token: write
      contents: read
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          role-session-name: GitHubActions-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Set up SAM CLI
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      
      - name: Cache SAM builds
        uses: actions/cache@v3
        with:
          path: .aws-sam/build
          key: ${{ runner.os }}-sam-${{ hashFiles('**/template.yaml') }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-sam-
      
      - name: Create API Keys Secret
        run: |
          # Check if secret exists
          if ! aws secretsmanager describe-secret \
            --secret-id weather-comment-generator/api-keys \
            --region ${{ env.AWS_REGION }} 2>/dev/null; then
            
            # Create secret with placeholder values
            aws secretsmanager create-secret \
              --name weather-comment-generator/api-keys \
              --description "API keys for Weather Comment Generator" \
              --secret-string '{"WXTECH_API_KEY":"placeholder","OPENAI_API_KEY":"placeholder","GEMINI_API_KEY":"placeholder","ANTHROPIC_API_KEY":"placeholder"}' \
              --region ${{ env.AWS_REGION }}
            
            echo "⚠️  Secret created with placeholder values. Please update with actual API keys."
          fi
      
      - name: Deploy to AWS Lambda
        working-directory: infrastructure/aws
        run: |
          chmod +x deploy.sh
          ./deploy.sh ${{ steps.env.outputs.environment }}
        env:
          SAM_S3_BUCKET: ${{ secrets.SAM_DEPLOYMENT_BUCKET }}
      
      - name: Run smoke tests
        if: success()
        run: |
          # Get API URL from CloudFormation outputs
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name weather-comment-generator-${{ steps.env.outputs.environment }} \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
            --output text)
          
          echo "Testing API endpoint: ${API_URL}"
          
          # Health check
          curl -s -X GET "${API_URL}/health" | jq .
      
      - name: Post deployment notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Lambda Deployment ${{ job.status }}
            Environment: ${{ steps.env.outputs.environment }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: failure()
    
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          role-session-name: GitHubActions-Cleanup-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Rollback on failure
        run: |
          echo "Deployment failed. Manual rollback may be required."
          # Add rollback logic here if needed