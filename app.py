"""Â§©Ê∞ó„Ç≥„É°„É≥„ÉàÁîüÊàê„Ç∑„Çπ„ÉÜ„É† - Streamlit UI"""

import streamlit as st

# „Éö„Éº„Ç∏Ë®≠ÂÆöÔºàÊúÄÂàù„Å´Âëº„Å∂ÂøÖË¶Å„Åå„ÅÇ„ÇãÔºâ
st.set_page_config(
    page_title="Â§©Ê∞ó„Ç≥„É°„É≥„ÉàÁîüÊàê„Ç∑„Çπ„ÉÜ„É†",
    page_icon="‚òÄÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

from datetime import datetime
import logging
import time
import pytz
from typing import Dict, Any, List

from src.workflows.comment_generation_workflow import run_comment_generation
from src.ui.streamlit_components import (
    location_selector,
    llm_provider_selector,
    result_display,
    generation_history_display,
    settings_panel
)
from src.ui.streamlit_utils import save_to_history, load_history, load_locations, format_timestamp

logger = logging.getLogger(__name__)

def initialize_session_state():
    """„Çª„ÉÉ„Ç∑„Éß„É≥Áä∂ÊÖã„ÅÆÂàùÊúüÂåñ"""
    defaults = {
        'generation_history': load_history(),
        'selected_location': load_locations(),  # ÂÖ®Âú∞ÁÇπ„Åå„Éá„Éï„Ç©„É´„Éà
        'llm_provider': "openai",
        'current_result': None,
        'is_generating': False
    }
    
    for key, value in defaults.items():
        if key not in st.session_state:
            st.session_state[key] = value


def display_single_result(result: Dict[str, Any]):
    """ÂÄãÂà•„ÅÆÁµêÊûú„ÇíË°®Á§∫ÔºàÁ¥ØÁ©çË°®Á§∫„ÇíÈÅø„Åë„ÇãÔºâ"""
    location = result['location']
    success = result['success']
    comment = result.get('comment', '')
    error = result.get('error', '')
    source_files = result.get('source_files', [])
    
    if success:
        st.success(f"‚úÖ **{location}**: {comment}")
        
        # „É°„Çø„Éá„Éº„Çø„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØÂ§©Ê∞óÊÉÖÂ†±„ÇÇË°®Á§∫
        if result.get('result') and result['result'].get('generation_metadata'):
            metadata = result['result']['generation_metadata']
            with st.expander(f"üìä {location}„ÅÆË©≥Á¥∞ÊÉÖÂ†±"):
                # Â§©Ê∞ó‰∫àÂ†±ÊôÇÂàª„ÅÆË°®Á§∫
                forecast_time = metadata.get('weather_forecast_time')
                if forecast_time:
                    try:
                        # UTCÊôÇÂàª„Çí„Éë„Éº„Çπ
                        dt = datetime.fromisoformat(forecast_time.replace('Z', '+00:00'))
                        # JST„Å´Â§âÊèõ
                        jst = pytz.timezone('Asia/Tokyo')
                        dt_jst = dt.astimezone(jst)
                        st.info(f"‚è∞ ‰∫àÂ†±ÊôÇÂàª: {dt_jst.strftime('%YÂπ¥%mÊúà%dÊó• %HÊôÇ')}")
                    except Exception as e:
                        logger.warning(f"‰∫àÂ†±ÊôÇÂàª„ÅÆ„Éë„Éº„ÇπÂ§±Êïó: {e}, forecast_time={forecast_time}")
                        st.info(f"‚è∞ ‰∫àÂ†±ÊôÇÂàª: {forecast_time}")
                
                # Â§©Ê∞ó„Éá„Éº„Çø„ÅÆË°®Á§∫
                col1, col2 = st.columns(2)
                with col1:
                    temp = metadata.get('temperature')
                    if temp is not None:
                        st.text(f"üå°Ô∏è Ê∞óÊ∏©: {temp}¬∞C")
                    
                    weather = metadata.get('weather_condition')
                    if weather and weather != '‰∏çÊòé':
                        st.text(f"‚òÅÔ∏è Â§©Ê∞ó: {weather}")
                
                with col2:
                    wind = metadata.get('wind_speed')
                    if wind is not None:
                        st.text(f"üí® È¢®ÈÄü: {wind}m/s")
                    
                    humidity = metadata.get('humidity')
                    if humidity is not None:
                        st.text(f"üíß ÊπøÂ∫¶: {humidity}%")
                
                # ÈÅ∏Êäû„Åï„Çå„Åü„Ç≥„É°„É≥„Éà„Éö„Ç¢
                selection_meta = metadata.get('selection_metadata', {})
                if selection_meta:
                    st.markdown("**üéØ ÈÅ∏Êäû„Åï„Çå„Åü„Ç≥„É°„É≥„Éà:**")
                    weather_comment = selection_meta.get('selected_weather_comment')
                    advice_comment = selection_meta.get('selected_advice_comment')
                    
                    if weather_comment:
                        st.text(f"Â§©Ê∞ó: {weather_comment}")
                    if advice_comment:
                        st.text(f"„Ç¢„Éâ„Éê„Ç§„Çπ: {advice_comment}")
                    
                    # LLM„Éó„É≠„Éê„Ç§„ÉÄ„ÉºÊÉÖÂ†±
                    provider = selection_meta.get('llm_provider')
                    if provider:
                        st.text(f"ÈÅ∏ÊäûÊñπÊ≥ï: LLM ({provider})")
    else:
        st.error(f"‚ùå **{location}**: {error}")


def display_streaming_results(results: List[Dict[str, Any]]):
    """ÁµêÊûú„Çí„Çπ„Éà„É™„Éº„Éü„É≥„Ç∞Ë°®Á§∫ÔºàÂæìÊù•Èñ¢Êï∞„ÉªÊúÄÁµÇÁµêÊûúÁî®Ôºâ"""
    # „Éò„ÉÉ„ÉÄ„Éº„ÅØgenerate_comment_with_progress„ÅßË°®Á§∫Ê∏à„Åø
    
    for result in results:
        display_single_result(result)
    
    # ÊÆã„Çä„ÅÆÂú∞ÁÇπÊï∞„ÇíË°®Á§∫
    remaining = len([r for r in results if not r['success'] and not r.get('error')])
    if remaining > 0:
        st.info(f"‚è≥ ÁîüÊàêÂæÖ„Å°: {remaining}Âú∞ÁÇπ")


def generate_comment_with_progress(locations: List[str], llm_provider: str, results_container) -> Dict[str, Any]:
    """„Éó„É≠„Ç∞„É¨„Çπ„Éê„Éº‰ªò„Åç„Ç≥„É°„É≥„ÉàÁîüÊàêÔºàË§áÊï∞Âú∞ÁÇπÂØæÂøúÔºâ"""
    if not locations:
        return {'success': False, 'error': 'Âú∞ÁÇπ„ÅåÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì'}
    
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    all_results = []
    total_locations = len(locations)
    
    # „Éò„ÉÉ„ÉÄ„Éº„Çí‰∏ÄÂ∫¶„Å†„ÅëË°®Á§∫
    with results_container.container():
        st.markdown("### üå§Ô∏è ÁîüÊàêÁµêÊûú")
    
    try:
        # „ÉØ„Éº„ÇØ„Éï„É≠„ÉºÂÆüË°å„ÅÆÈñãÂßã
        st.session_state.is_generating = True
        
        for idx, location in enumerate(locations):
            # ÈÄ≤ÊçóÊõ¥Êñ∞
            progress = (idx / total_locations)
            progress_bar.progress(progress)
            status_text.text(f"ÁîüÊàê‰∏≠... {location} ({idx + 1}/{total_locations})")
            
            try:
                # ÂÆüÈöõ„ÅÆ„Ç≥„É°„É≥„ÉàÁîüÊàê
                result = run_comment_generation(
                    location_name=location,
                    target_datetime=datetime.now(),
                    llm_provider=llm_provider
                )
                
                # ÁµêÊûú„ÇíÂèéÈõÜ
                location_result = {
                    'location': location,
                    'result': result,
                    'success': result.get('success', False),
                    'comment': result.get('final_comment', ''),
                    'error': result.get('error', None)
                }
                
                # „ÇΩ„Éº„Çπ„Éï„Ç°„Ç§„É´ÊÉÖÂ†±„ÇíÊäΩÂá∫
                metadata = result.get('generation_metadata', {})
                if metadata.get('selected_past_comments'):
                    sources = []
                    for comment in metadata['selected_past_comments']:
                        if 'source_file' in comment:
                            sources.append(comment['source_file'])
                    if sources:
                        location_result['source_files'] = sources
                        # Ë©≥Á¥∞„É≠„Ç∞Âá∫Âäõ
                        logger.info(f"Âú∞ÁÇπ: {location}")
                        logger.info(f"  Â§©Ê∞ó: {metadata.get('weather_condition', '‰∏çÊòé')}")
                        logger.info(f"  Ê∞óÊ∏©: {metadata.get('temperature', '‰∏çÊòé')}¬∞C")
                        logger.info(f"  „Ç≥„É°„É≥„ÉàÁîüÊàêÂÖÉ„Éï„Ç°„Ç§„É´: {sources}")
                        logger.info(f"  ÁîüÊàê„Ç≥„É°„É≥„Éà: {result.get('final_comment', '')}")
                
                all_results.append(location_result)
                
                # ÂÄãÂà•Âú∞ÁÇπ„ÅÆÁµêÊûú„ÇíËøΩÂä†Ë°®Á§∫ÔºàÁ¥ØÁ©çË°®Á§∫„ÇíÈÅø„Åë„ÇãÔºâ
                with results_container.container():
                    display_single_result(location_result)
                
                # Â±•Ê≠¥„Å´‰øùÂ≠ò
                if result.get('success'):
                    save_to_history(result, location, llm_provider)
                    
            except Exception as location_error:
                # ÂÄãÂà•Âú∞ÁÇπ„ÅÆ„Ç®„É©„Éº„Çí„Ç≠„É£„ÉÉ„ÉÅ„Åó„Å¶Ë®òÈå≤
                location_result = {
                    'location': location,
                    'result': None,
                    'success': False,
                    'comment': '',
                    'error': str(location_error)
                }
                all_results.append(location_result)
                
                # ÂÄãÂà•Âú∞ÁÇπ„ÅÆÁµêÊûú„ÇíËøΩÂä†Ë°®Á§∫ÔºàÁ¥ØÁ©çË°®Á§∫„ÇíÈÅø„Åë„ÇãÔºâ
                with results_container.container():
                    display_single_result(location_result)
        
        # ÂÆå‰∫Ü
        progress_bar.progress(1.0)
        
        # ÊàêÂäüÊï∞„Çí„Ç´„Ç¶„É≥„Éà
        success_count = sum(1 for r in all_results if r['success'])
        
        if success_count > 0:
            status_text.text(f"ÂÆå‰∫ÜÔºÅ{success_count}/{total_locations}Âú∞ÁÇπ„ÅÆÁîüÊàê„ÅåÊàêÂäü„Åó„Åæ„Åó„Åü")
        else:
            status_text.text("„Ç®„É©„ÉºÔºö„Åô„Åπ„Å¶„ÅÆÂú∞ÁÇπ„Åß„Ç≥„É°„É≥„ÉàÁîüÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü")
        
        time.sleep(0.5)
        
        # „Ç®„É©„Éº„Åå„ÅÇ„Å£„ÅüÂ†¥Âêà„ÅØË©≥Á¥∞„ÇíÂèéÈõÜ
        errors = [r for r in all_results if not r['success']]
        error_messages = []
        
        for err in errors:
            location = err['location']
            error_msg = err.get('error', '‰∏çÊòé„Å™„Ç®„É©„Éº')
            error_messages.append(f"{location}: {error_msg}")
        
        return {
            'success': success_count > 0,
            'total_locations': total_locations,
            'success_count': success_count,
            'results': all_results,
            'final_comment': '\n'.join([f"{r['location']}: {r['comment']}" for r in all_results if r['success']]),
            'errors': error_messages
        }
        
    except Exception as e:
        error_msg = str(e)
        
        # „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„Çí„É¶„Éº„Ç∂„Éº„Å´„Çè„Åã„Çä„ÇÑ„Åô„ÅèË°®Á§∫
        if "OPENAI_API_KEY" in error_msg or "GEMINI_API_KEY" in error_msg or "ANTHROPIC_API_KEY" in error_msg:
            st.error(f"üîê API„Ç≠„Éº„Ç®„É©„Éº: {error_msg}")
            st.info("üí° „Éí„É≥„Éà: „Çµ„Ç§„Éâ„Éê„Éº„ÅÆ„ÄåAPI„Ç≠„ÉºË®≠ÂÆö„Äç„Åã„ÇâÂøÖË¶Å„Å™API„Ç≠„Éº„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
        elif "S3„Å∏„ÅÆÊé•Á∂ö„Å´Â§±Êïó" in error_msg:
            st.error("üóÑÔ∏è S3Êé•Á∂ö„Ç®„É©„Éº: ÈÅéÂéª„Ç≥„É°„É≥„Éà„Éá„Éº„Çø„Éô„Éº„Çπ„Å´Êé•Á∂ö„Åß„Åç„Åæ„Åõ„Çì")
            st.info("üí° „Éí„É≥„Éà: AWSË™çË®ºÊÉÖÂ†±ÔºàAWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEYÔºâ„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
        elif "WXTECH_API_KEY" in error_msg:
            st.error("‚òÅÔ∏è Ê∞óË±°API„Ç®„É©„Éº: Â§©Ê∞ó‰∫àÂ†±„Éá„Éº„Çø„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì")
            st.info("üí° „Éí„É≥„Éà: WXTECH_API_KEYÁí∞Â¢ÉÂ§âÊï∞„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
        elif "Âú∞ÁÇπ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì" in error_msg:
            st.error(f"üìç Âú∞ÁÇπ„Ç®„É©„Éº: {error_msg}")
            st.info("üí° „Éí„É≥„Éà: Âú∞ÁÇπÂêç„ÇíÁ¢∫Ë™ç„Åó„Å¶„ÄÅÊ≠£„Åó„ÅÑÂú∞ÁÇπ„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
        else:
            st.error(f"‚ö†Ô∏è „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: {error_msg}")
        
        return {
            'success': False,
            'error': error_msg,
            'final_comment': None
        }
    finally:
        st.session_state.is_generating = False
        progress_bar.empty()
        status_text.empty()


def main():
    """„É°„Ç§„É≥„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥"""
    # „Çª„ÉÉ„Ç∑„Éß„É≥Áä∂ÊÖã„ÅÆÂàùÊúüÂåñ
    initialize_session_state()
    
    # „Éò„ÉÉ„ÉÄ„Éº
    st.markdown('<h1 class="main-header">‚òÄÔ∏è Â§©Ê∞ó„Ç≥„É°„É≥„ÉàÁîüÊàê„Ç∑„Çπ„ÉÜ„É† ‚òÄÔ∏è</h1>', unsafe_allow_html=True)
    
    # „Çµ„Ç§„Éâ„Éê„Éº
    with st.sidebar:
        st.header("Ë®≠ÂÆö")
        
        # API„Ç≠„ÉºË®≠ÂÆö
        with st.expander("API„Ç≠„ÉºË®≠ÂÆö", expanded=False):
            settings_panel()
        
        # ÁîüÊàêÂ±•Ê≠¥
        st.header("ÁîüÊàêÂ±•Ê≠¥")
        generation_history_display(st.session_state.generation_history)
    
    # „É°„Ç§„É≥„Ç≥„É≥„ÉÜ„É≥„ÉÑ
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.header("üìç ÂÖ•ÂäõË®≠ÂÆö")
        
        # Âú∞ÁÇπÈÅ∏Êäû
        location = location_selector()
        st.session_state.selected_location = location
        
        # LLM„Éó„É≠„Éê„Ç§„ÉÄ„ÉºÈÅ∏Êäû
        llm_provider = llm_provider_selector()
        st.session_state.llm_provider = llm_provider
        
        # ÁèæÂú®ÊôÇÂàªË°®Á§∫
        st.info(f"üïê ÁîüÊàêÊôÇÂàª: {format_timestamp(datetime.now())}")
        
        # ÁîüÊàê„Éú„Çø„É≥
        if st.button(
            "üéØ „Ç≥„É°„É≥„ÉàÁîüÊàê",
            type="primary",
            disabled=st.session_state.is_generating,
            use_container_width=True
        ):
            # ÁµêÊûúË°®Á§∫Áî®„ÅÆ„Ç≥„É≥„ÉÜ„Éä„ÇíÂÖà„Å´‰ΩúÊàê
            # col2„ÅÆÂÜÖÂÆπ„Çí„ÇØ„É™„Ç¢„Åó„Å¶„Åã„ÇâÊñ∞„Åó„ÅÑ„Ç≥„É≥„ÉÜ„Éä„Çí‰ΩúÊàê
            col2.empty()
            results_container = col2.container()
            
            with st.spinner("ÁîüÊàê‰∏≠..."):
                # Ë§áÊï∞Âú∞ÁÇπ„ÅÆÂá¶ÁêÜ
                if isinstance(location, list) and len(location) > 0:
                    result = generate_comment_with_progress(location, llm_provider, results_container)
                else:
                    st.error("Âú∞ÁÇπ„ÅåÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì")
                    result = None
                st.session_state.current_result = result
                
                if result and result['success']:
                    st.success(f"‚úÖ „Ç≥„É°„É≥„ÉàÁîüÊàê„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ ({result['success_count']}/{result['total_locations']}Âú∞ÁÇπÊàêÂäü)")
                    if result['success_count'] == result['total_locations']:
                        st.balloons()
                    # ‰∏ÄÈÉ®Â§±Êïó„Åó„ÅüÂ†¥Âêà„ÅÆ„Ç®„É©„ÉºË°®Á§∫
                    if result.get('errors'):
                        with st.expander("‚ö†Ô∏è „Ç®„É©„ÉºË©≥Á¥∞"):
                            for error in result['errors']:
                                st.warning(error)
                elif result:
                    # „Åô„Åπ„Å¶Â§±Êïó„Åó„ÅüÂ†¥Âêà„ÅØerror„É°„ÉÉ„Çª„Éº„Ç∏„Çí„Çè„Åã„Çä„ÇÑ„Åô„ÅèË°®Á§∫
                    if result.get('errors'):
                        for error in result['errors']:
                            st.error(error)
    
    with col2:
        st.header("üí¨ ÁîüÊàêÁµêÊûú")
        
        # ÁîüÊàê‰∏≠„Åß„Å™„ÅÑÂ†¥Âêà„ÅÆ„ÅøÂõ∫ÂÆö„ÅÆÁµêÊûú„ÇíË°®Á§∫
        if not st.session_state.is_generating:
            if st.session_state.current_result:
                result_display(st.session_state.current_result)
            else:
                st.info("üëà Â∑¶ÂÅ¥„ÅÆ„Éë„Éç„É´„Åã„ÇâÂú∞ÁÇπ„Å®LLM„Éó„É≠„Éê„Ç§„ÉÄ„Éº„ÇíÈÅ∏Êäû„Åó„Å¶„ÄÅ„Äå„Ç≥„É°„É≥„ÉàÁîüÊàê„Äç„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
            
            # „Çµ„É≥„Éó„É´Ë°®Á§∫
            with st.expander("„Çµ„É≥„Éó„É´„Ç≥„É°„É≥„Éà"):
                st.markdown("""
                **Êô¥„Çå„ÅÆÊó•**: ÁàΩ„ÇÑ„Åã„Å™Êúù„Åß„Åô„Å≠  
                **Èõ®„ÅÆÊó•**: ÂÇò„Çí„ÅäÂøò„Çå„Å™„Åè  
                **Êõá„Çä„ÅÆÊó•**: ÈÅé„Åî„Åó„ÇÑ„Åô„ÅÑ‰∏ÄÊó•„Åß„Åô  
                **Èõ™„ÅÆÊó•**: Ë∂≥ÂÖÉ„Å´„ÅäÊ∞ó„Çí„Å§„Åë„Å¶
                """)
    
    # „Éï„ÉÉ„Çø„Éº
    st.markdown("---")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown("**Version**: 1.0.0")
    with col2:
        st.markdown("**Last Updated**: 2025-06-06")
    with col3:
        st.markdown("**By**: WNI Team")


def run_streamlit_app():
    """Streamlit„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅÆÂÆüË°å"""
    main()


if __name__ == "__main__":
    run_streamlit_app()
