AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Weather Comment Generator Serverless Infrastructure

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Environment name

  ApiKeysSecretName:
    Type: String
    Default: weather-comment-generator/api-keys
    Description: Name of the secret containing API keys

Globals:
  Function:
    Runtime: python3.11
    Architectures:
      - arm64
    Timeout: 30
    MemorySize: 512
    Tracing: Active
    Environment:
      Variables:
        POWERTOOLS_SERVICE_NAME: weather-comment-generator
        POWERTOOLS_METRICS_NAMESPACE: WeatherCommentGenerator
        LOG_LEVEL: INFO
        ENVIRONMENT: !Ref Environment

Resources:
  # S3 Bucket for configuration files
  ConfigBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-config-${AWS::AccountId}
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            NoncurrentVersionExpirationInDays: 30
            Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # DynamoDB Tables
  CommentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-comments
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      AttributeDefinitions:
        - AttributeName: location_id
          AttributeType: S
        - AttributeName: generated_at
          AttributeType: S
        - AttributeName: comment_date
          AttributeType: S
        - AttributeName: llm_provider
          AttributeType: S
      KeySchema:
        - AttributeName: location_id
          KeyType: HASH
        - AttributeName: generated_at
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: DateIndex
          KeySchema:
            - AttributeName: comment_date
              KeyType: HASH
            - AttributeName: generated_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: ProviderIndex
          KeySchema:
            - AttributeName: llm_provider
              KeyType: HASH
            - AttributeName: generated_at
              KeyType: RANGE
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
              - location_id
              - generated_comment
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment

  WeatherCacheTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-weather-cache
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: location_id
          AttributeType: S
        - AttributeName: forecast_time
          AttributeType: S
        - AttributeName: geohash
          AttributeType: S
      KeySchema:
        - AttributeName: location_id
          KeyType: HASH
        - AttributeName: forecast_time
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GeohashIndex
          KeySchema:
            - AttributeName: geohash
              KeyType: HASH
            - AttributeName: forecast_time
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment

  LocationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-locations
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: location_id
          AttributeType: S
        - AttributeName: popular_rank
          AttributeType: N
      KeySchema:
        - AttributeName: location_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: PopularityIndex
          KeySchema:
            - AttributeName: popular_rank
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # SQS Queue
  CommentGenerationQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-comment-generation
      VisibilityTimeout: 360
      MessageRetentionPeriod: 1209600  # 14 days
      ReceiveMessageWaitTimeSeconds: 20
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt CommentGenerationDLQ.Arn
        maxReceiveCount: 3
      Tags:
        - Key: Environment
          Value: !Ref Environment

  CommentGenerationDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-comment-generation-dlq
      MessageRetentionPeriod: 1209600  # 14 days
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # SNS Topic
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${AWS::StackName}-notifications
      DisplayName: Weather Comment Generator Notifications
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # Lambda Layer
  DependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub ${AWS::StackName}-dependencies
      Description: Python dependencies for Lambda functions
      ContentUri: layers/dependencies/
      CompatibleRuntimes:
        - python3.11
      CompatibleArchitectures:
        - arm64
      RetentionPolicy: Delete

  # Lambda Functions
  ApiHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-api-handler
      CodeUri: lambda/api_handler/
      Handler: lambda_function.lambda_handler
      Layers:
        - !Ref DependenciesLayer
      Environment:
        Variables:
          DYNAMODB_COMMENTS_TABLE: !Ref CommentsTable
          SQS_QUEUE_URL: !Ref CommentGenerationQueue
          CORS_ORIGIN: "*"
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref CommentsTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt CommentGenerationQueue.QueueName
      Events:
        GenerateApi:
          Type: Api
          Properties:
            Path: /generate
            Method: POST
            RestApiId: !Ref ApiGateway
        StatusApi:
          Type: Api
          Properties:
            Path: /status/{request_id}
            Method: GET
            RestApiId: !Ref ApiGateway
        ResultApi:
          Type: Api
          Properties:
            Path: /result/{request_id}
            Method: GET
            RestApiId: !Ref ApiGateway

  CommentProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-comment-processor
      CodeUri: lambda/comment_processor/
      Handler: lambda_function.lambda_handler
      MemorySize: 1024
      Timeout: 300
      ReservedConcurrentExecutions: 5
      Layers:
        - !Ref DependenciesLayer
      Environment:
        Variables:
          DYNAMODB_COMMENTS_TABLE: !Ref CommentsTable
          DYNAMODB_WEATHER_CACHE_TABLE: !Ref WeatherCacheTable
          SNS_TOPIC_ARN: !Ref NotificationTopic
          SECRETS_ARN: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${ApiKeysSecretName}
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CommentsTable
        - DynamoDBReadPolicy:
            TableName: !Ref WeatherCacheTable
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt NotificationTopic.TopicName
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${ApiKeysSecretName}*
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt CommentGenerationQueue.Arn
            BatchSize: 5
            FunctionResponseTypes:
              - ReportBatchItemFailures

  WeatherFetcherFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-weather-fetcher
      CodeUri: lambda/weather_fetcher/
      Handler: lambda_function.lambda_handler
      Timeout: 60
      ReservedConcurrentExecutions: 10
      Layers:
        - !Ref DependenciesLayer
      Environment:
        Variables:
          DYNAMODB_WEATHER_CACHE_TABLE: !Ref WeatherCacheTable
          DYNAMODB_LOCATIONS_TABLE: !Ref LocationsTable
          SECRETS_ARN: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${ApiKeysSecretName}
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WeatherCacheTable
        - DynamoDBCrudPolicy:
            TableName: !Ref LocationsTable
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${ApiKeysSecretName}*

  CacheWarmerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-cache-warmer
      CodeUri: lambda/cache_warmer/
      Handler: lambda_function.lambda_handler
      MemorySize: 512
      Timeout: 900  # 15 minutes
      Layers:
        - !Ref DependenciesLayer
      Environment:
        Variables:
          WEATHER_FETCHER_FUNCTION: !Ref WeatherFetcherFunction
          DYNAMODB_LOCATIONS_TABLE: !Ref LocationsTable
          POPULAR_LOCATIONS_BUCKET: !Ref ConfigBucket
          POPULAR_LOCATIONS_KEY: config/popular_locations.json
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref LocationsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref LocationsTable
        - LambdaInvokeFunction:
            FunctionName: !Ref WeatherFetcherFunction
        - S3ReadPolicy:
            BucketName: !Ref ConfigBucket
      Events:
        ScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: rate(1 hour)
            Description: Warm cache for popular locations
            Enabled: true

  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${AWS::StackName}-api
      StageName: !Ref Environment
      TracingEnabled: true
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      Auth:
        ApiKeyRequired: true
        UsagePlan:
          CreateUsagePlan: PER_API
          Description: Usage plan for Weather Comment Generator API
          Quota:
            Limit: 10000
            Period: DAY
          Throttle:
            BurstLimit: 100
            RateLimit: 50

  # Step Functions
  CommentGenerationStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub ${AWS::StackName}-comment-generation
      DefinitionUri: statemachine/comment_generation.asl.yaml
      DefinitionSubstitutions:
        WeatherFetcherArn: !GetAtt WeatherFetcherFunction.Arn
        CommentProcessorArn: !GetAtt CommentProcessorFunction.Arn
        CommentsTableName: !Ref CommentsTable
        NotificationTopicArn: !Ref NotificationTopic
      Policies:
        - LambdaInvokeFunction:
            FunctionName: !Ref WeatherFetcherFunction
        - LambdaInvokeFunction:
            FunctionName: !Ref CommentProcessorFunction
        - DynamoDBCrudPolicy:
            TableName: !Ref CommentsTable
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt NotificationTopic.TopicName
      Type: STANDARD
      Tracing:
        Enabled: true

  # CloudWatch Alarms
  ApiErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-api-errors
      AlarmDescription: API Handler error rate too high
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref ApiHandlerFunction
      AlarmActions:
        - !Ref NotificationTopic

  DLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-dlq-messages
      AlarmDescription: Messages in DLQ
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt CommentGenerationDLQ.QueueName
      AlarmActions:
        - !Ref NotificationTopic

Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
    Export:
      Name: !Sub ${AWS::StackName}-ApiUrl

  CommentsTableName:
    Description: DynamoDB Comments table name
    Value: !Ref CommentsTable
    Export:
      Name: !Sub ${AWS::StackName}-CommentsTable

  WeatherCacheTableName:
    Description: DynamoDB Weather Cache table name
    Value: !Ref WeatherCacheTable
    Export:
      Name: !Sub ${AWS::StackName}-WeatherCacheTable

  LocationsTableName:
    Description: DynamoDB Locations table name
    Value: !Ref LocationsTable
    Export:
      Name: !Sub ${AWS::StackName}-LocationsTable

  QueueUrl:
    Description: SQS Queue URL
    Value: !Ref CommentGenerationQueue
    Export:
      Name: !Sub ${AWS::StackName}-QueueUrl

  ConfigBucketName:
    Description: S3 Config bucket name
    Value: !Ref ConfigBucket
    Export:
      Name: !Sub ${AWS::StackName}-ConfigBucket